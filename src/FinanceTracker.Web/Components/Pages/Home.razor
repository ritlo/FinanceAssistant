@page "/"
@rendermode InteractiveServer
@inject FinanceTracker.Web.Services.IAgentApiClient AgentApiClient
@inject FinanceTracker.Web.Services.TransactionApiClient TransactionApiClient
@inject ILogger<Home> Logger

<PageTitle>Finance Assistant</PageTitle>

<div class="finance-dashboard">
    <div class="main-content">

        <div class="header">
            <h1>Finance Assistant</h1>
        </div>

        <MudGrid AlignItems="AlignItems.Center" Justify="Justify.SpaceBetween" Class="mb-6">
            <MudItem xs="1" sm="1" md="1" lg="1" xl="1" Class="d-flex justify-start">
                <MudIconButton Icon="@Icons.Material.Filled.ChevronLeft" Color="Color.Primary" Size="Size.Large" OnClick="PrevMonth" aria-label="Previous Month" />
            </MudItem>
            <MudItem xs="10" sm="10" md="10" lg="10" xl="10" Class="d-flex justify-center">
                <MudText Typo="Typo.h4" Class="font-weight-bold">@CurrentMonthYear</MudText>
            </MudItem>
            <MudItem xs="1" sm="1" md="1" lg="1" xl="1" Class="d-flex justify-end">
                <MudIconButton Icon="@Icons.Material.Filled.ChevronRight" Color="Color.Primary" Size="Size.Large" OnClick="NextMonth" aria-label="Next Month" />
            </MudItem>
        </MudGrid>
        <div class="expense-bars mb-6">
            @if (summaryItems.Any())
            {
                @foreach (var item in summaryItems)
                {
                    <div class="expense-item">
                        <div class="expense-label">@item.Category</div>
                        <div class="expense-bar-container">
                            <div class="expense-bar" style="width: @(GetExpensePercentage(item.TotalAmount))%; background: @(GetBarGradient(item.Category));"></div>
                        </div>
                        <div class="expense-amount">$@item.TotalAmount.ToString("F2")</div>
                    </div>
                }
            }
            else
            {
                <p>No expenses recorded for this month.</p>
            }
        </div>

        <MudGrid Spacing="3" Class="mb-6">
            <MudItem xs="12" sm="6">
                <MudPaper Elevation="1" Class="pa-4" Style="background:#23272f; color:#fff;">
                    <MudText Typo="Typo.h6" Class="mb-2"><MudIcon Icon="@Icons.Material.Filled.Payments" Class="mr-2" />Payments</MudText>
                    <MudText>Pay electricity bill tomorrow</MudText>
                </MudPaper>
            </MudItem>
            <MudItem xs="12" sm="6">
                <MudPaper Elevation="1" Class="pa-4" Style="background:#23272f; color:#fff;">
                    <MudText Typo="Typo.h6" Class="mb-2"><MudIcon Icon="@Icons.Material.Filled.Notes" Class="mr-2" />Notes</MudText>
                    <MudText>Scan credit card statement</MudText>
                </MudPaper>
            </MudItem>
        </MudGrid>

        <div class="chat-section">
            <div class="messages">
                @foreach (var message in messages)
                {
                    <div class="@(message.IsUser ? "user-message" : "agent-message")">
                        <p>@message.Text</p>
                    </div>
                }
                @if (isLoading)
                {
                    <div class="agent-message">
                        <p>Agent is thinking...</p>
                    </div>
                }
            </div>
            <div class="input-area">
                <InputFile OnChange="HandleFileSelected" class="upload-button" />
                <EditForm Model="@chatInput" OnValidSubmit="SendMessage" FormName="chat-form">
                    <InputText @bind-Value="chatInput.UserInput" placeholder="Ask FinanceAssistant..." class="form-control" />
                    <button type="submit" disabled="@isLoading">
                        <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><line x1="22" y1="2" x2="11" y2="13"></line><polygon points="22 2 15 22 11 13 2 9 22 2"></polygon></svg>
                    </button>
                </EditForm>
            </div>
        </div>
    </div>
</div>

@code {

    [SupplyParameterFromForm]
    private ChatInputModel chatInput { get; set; } = new();
    private List<ChatMessage> messages = new List<ChatMessage>();
    private List<FinanceTracker.Web.Models.MonthlySummaryItem> summaryItems = new List<FinanceTracker.Web.Models.MonthlySummaryItem>();
    private bool isLoading = false;
    private decimal maxExpense = 0;

    private int currentMonth = DateTime.Now.Month;
    private int currentYear = DateTime.Now.Year;
    private static readonly Dictionary<string, string> categoryGradients = new()
    {
        { "Food", "linear-gradient(90deg, #ff5f6d, #845ec2)" },
        { "Rent", "linear-gradient(90deg, #f9d423, #ff4e50)" },
        { "Shopping", "linear-gradient(90deg, #43cea2, #185a9d)" },
        { "Entertainment", "linear-gradient(90deg, #30cfd0, #330867)" },
        { "Transport", "linear-gradient(90deg, #36d1c4, #5b86e5)" },
        // Add more as needed
    };

    protected override async Task OnInitializedAsync()
    {
        await LoadMonthlySummary();
    }

    private string CurrentMonthYear => new DateTime(currentYear, currentMonth, 1).ToString("MMMM yyyy");

    private async Task LoadMonthlySummary()
    {
        try
        {
            summaryItems = await TransactionApiClient.GetMonthlySummary(currentMonth, currentYear);
            if (summaryItems.Any())
            {
                maxExpense = summaryItems.Max(item => item.TotalAmount);
            }
            else
            {
                maxExpense = 0;
            }
            StateHasChanged();
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error loading monthly summary.");
        }
    }

    private void PrevMonth()
    {
        if (currentMonth == 1)
        {
            currentMonth = 12;
            currentYear--;
        }
        else
        {
            currentMonth--;
        }
        _ = LoadMonthlySummary();
    }

    private void NextMonth()
    {
        if (currentMonth == 12)
        {
            currentMonth = 1;
            currentYear++;
        }
        else
        {
            currentMonth++;
        }
        _ = LoadMonthlySummary();
    }

    private double GetExpensePercentage(decimal amount)
    {
        if (maxExpense == 0) return 0;
        return (double)(amount / maxExpense) * 100;
    }

    private string GetBarGradient(string category)
    {
        if (categoryGradients.TryGetValue(category, out var gradient))
            return gradient;
        return "linear-gradient(90deg, #b2fefa, #0ed2f7)";
    }

    private async Task SendMessage()
    {
        if (string.IsNullOrWhiteSpace(chatInput.UserInput))
            return;

        var currentInput = chatInput.UserInput;
        messages.Add(new ChatMessage { Text = currentInput, IsUser = true });
        chatInput.UserInput = "";
        isLoading = true;
        StateHasChanged();

        var agentMessage = new ChatMessage { Text = string.Empty, IsUser = false };
        messages.Add(agentMessage);
        try
        {
            await AgentApiClient.StreamAgentRequestStreamAsync(currentInput, chunk =>
            {
                agentMessage.Text += chunk;
                InvokeAsync(StateHasChanged);
            },
            error =>
            {
                agentMessage.Text += $"\n[Error]: {error}";
                InvokeAsync(StateHasChanged);
            });
        }
        catch (Exception ex)
        {
            agentMessage.Text += $"\n[Error]: {ex.Message}";
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private async Task HandleFileSelected(InputFileChangeEventArgs e)
    {
        isLoading = true;
        StateHasChanged();

        try
        {
            var uploadResult = await AgentApiClient.UploadDocumentAsync(e.File);
            if (uploadResult.Success)
            {
                messages.Add(new ChatMessage { Text = "File uploaded and processed successfully!", IsUser = false });
                await LoadMonthlySummary(); // Refresh summary after upload
            }
            else
            {
                messages.Add(new ChatMessage { Text = $"Error uploading file: {uploadResult.ErrorMessage}", IsUser = false });
            }
        }
        catch (Exception ex)
        {
            messages.Add(new ChatMessage { Text = $"Error uploading file: {ex.Message}", IsUser = false });
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private class ChatMessage
    {
        public string Text { get; set; } = string.Empty;
        public bool IsUser { get; set; }
    }

    private class ChatInputModel
    {
        public string UserInput { get; set; } = string.Empty;
    }
}
