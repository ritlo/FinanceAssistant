@page "/"
@rendermode InteractiveServer
@inject FinanceTracker.Web.Services.AgentApiClient AgentApiClient
@inject ILogger<Home> Logger

<PageTitle>AI Finance Assistant</PageTitle>

<h1>AI Finance Assistant</h1>

<div class="chat-container">
    <div class="messages">
        @foreach (var message in messages)
        {
            <div class="@(message.IsUser ? "user-message" : "agent-message")">
                <p>@message.Text</p>
            </div>
        }
        @if (isLoading)
        {
            <div class="agent-message">
                <p>Agent is thinking...</p>
            </div>
        }
    </div>

    <div class="input-area">
        <EditForm Model="@chatInput" OnValidSubmit="SendMessage" FormName="chat-form">
            <InputText @bind-Value="chatInput.UserInput" placeholder="Ask your finance assistant..." class="form-control" />
            <button type="submit" disabled="@isLoading">Send</button>
        </EditForm>
    </div>
</div>

@code {
    [SupplyParameterFromForm]
    private ChatInputModel chatInput { get; set; } = new();
    private List<ChatMessage> messages = new List<ChatMessage>();
    private bool isLoading = false;

    private async Task SendMessage()
    {
        if (string.IsNullOrWhiteSpace(chatInput.UserInput))
            return;

        var currentInput = chatInput.UserInput;
        Logger.LogInformation("User input: {Input}", currentInput);
        messages.Add(new ChatMessage { Text = currentInput, IsUser = true });
        chatInput.UserInput = "";
        isLoading = true;
        StateHasChanged();

        // Streaming logic
        var agentMessage = new ChatMessage { Text = string.Empty, IsUser = false };
        messages.Add(agentMessage);
        try
        {
            await AgentApiClient.StreamAgentRequestStream(currentInput, chunk =>
            {
                agentMessage.Text += chunk;
                InvokeAsync(StateHasChanged);
            },
            error =>
            {
                Logger.LogError("Streaming error: {Error}", error);
                agentMessage.Text += $"\n[Error]: {error}";
                InvokeAsync(StateHasChanged);
            });
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "An unexpected error occurred during streaming.");
            agentMessage.Text += $"\n[Error]: {ex.Message}";
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }


    private class ChatMessage
    {
        public string Text { get; set; } = string.Empty;
        public bool IsUser { get; set; }
    }

    private class ChatInputModel
    {
        public string UserInput { get; set; } = string.Empty;
    }
}

<style>
    .chat-container {
        display: flex;
        flex-direction: column;
        height: 600px; /* Adjust as needed */
        border: 1px solid #ccc;
        border-radius: 8px;
        overflow: hidden;
        font-family: Arial, sans-serif;
    }

    .messages {
        flex-grow: 1;
        padding: 15px;
        overflow-y: auto;
        background-color: #f9f9f9;
    }

    .user-message {
        text-align: right;
        margin-bottom: 10px;
    }

    .user-message p {
        background-color: #dcf8c6;
        color: #333;
        padding: 8px 12px;
        border-radius: 15px;
        display: inline-block;
        max-width: 70%;
    }

    .agent-message {
        text-align: left;
        margin-bottom: 10px;
    }

    .agent-message p {
        background-color: #e0e0e0;
        color: #333;
        padding: 8px 12px;
        border-radius: 15px;
        display: inline-block;
        max-width: 70%;
    }

    .input-area {
        display: flex;
        padding: 15px;
        border-top: 1px solid #ccc;
        background-color: #fff;
    }

    .input-area input {
        flex-grow: 1;
        padding: 10px;
        border: 1px solid #ddd;
        border-radius: 20px;
        margin-right: 10px;
        font-size: 16px;
    }

    .input-area button {
        background-color: #007bff;
        color: white;
        border: none;
        border-radius: 20px;
        padding: 10px 20px;
        cursor: pointer;
        font-size: 16px;
    }

    .input-area button:disabled {
        background-color: #cccccc;
        cursor: not-allowed;
    }
</style>
