@page "/"
@rendermode InteractiveServer
@inject FinanceTracker.Web.Services.AgentApiClient AgentApiClient
@inject FinanceTracker.Web.Services.TransactionApiClient TransactionApiClient
@inject ILogger<Home> Logger

<PageTitle>Finance Assistant</PageTitle>

<div class="finance-dashboard">
    <div class="main-content">
        <div class="header">
            <h1>Finance Assistant</h1>
        </div>

        <div class="summary-section">
            <h2>August</h2>
            <div class="expense-bars">
                @if (summaryItems.Any())
                {
                    @foreach (var item in summaryItems)
                    {
                        <div class="expense-item">
                            <div class="expense-label">@item.Category</div>
                            <div class="expense-bar-container">
                                <div class="expense-bar" style="width: @(GetExpensePercentage(item.TotalAmount))%;"></div>
                            </div>
                            <div class="expense-amount">$@item.TotalAmount.ToString("F2")</div>
                        </div>
                    }
                }
                else
                {
                    <p>No expenses recorded for this month.</p>
                }
            </div>
        </div>

        <div class="cards-section">
            <div class="card">
                <div class="card-header">
                    <span class="icon">📅</span>
                    <h3>Payments</h3>
                </div>
                <p>Pay electricity bill tomorrow</p>
            </div>
            <div class="card">
                <div class="card-header">
                    <span class="icon">📄</span>
                    <h3>Notes</h3>
                </div>
                <p>Scan credit card statement</p>
            </div>
        </div>

        <div class="chat-section">
            <div class="messages">
                @foreach (var message in messages)
                {
                    <div class="@(message.IsUser ? "user-message" : "agent-message")">
                        <p>@message.Text</p>
                    </div>
                }
                @if (isLoading)
                {
                    <div class="agent-message">
                        <p>Agent is thinking...</p>
                    </div>
                }
            </div>
            <div class="input-area">
                <InputFile OnChange="HandleFileSelected" class="upload-button" />
                <EditForm Model="@chatInput" OnValidSubmit="SendMessage" FormName="chat-form">
                    <InputText @bind-Value="chatInput.UserInput" placeholder="Ask FinanceAssistant..." class="form-control" />
                    <button type="submit" disabled="@isLoading">
                        <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><line x1="22" y1="2" x2="11" y2="13"></line><polygon points="22 2 15 22 11 13 2 9 22 2"></polygon></svg>
                    </button>
                </EditForm>
            </div>
        </div>
    </div>
</div>

@code {
    [SupplyParameterFromForm]
    private ChatInputModel chatInput { get; set; } = new();
    private List<ChatMessage> messages = new List<ChatMessage>();
    private List<FinanceTracker.Web.Models.MonthlySummaryItem> summaryItems = new List<FinanceTracker.Web.Models.MonthlySummaryItem>();
    private bool isLoading = false;
    private decimal maxExpense = 0;

    protected override async Task OnInitializedAsync()
    {
        await LoadMonthlySummary();
    }

    private async Task LoadMonthlySummary()
    {
        try
        {
            summaryItems = await TransactionApiClient.GetMonthlySummary();
            if (summaryItems.Any())
            {
                maxExpense = summaryItems.Max(item => item.TotalAmount);
            }
            StateHasChanged();
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error loading monthly summary.");
        }
    }

    private double GetExpensePercentage(decimal amount)
    {
        if (maxExpense == 0) return 0;
        return (double)(amount / maxExpense) * 100;
    }

    private async Task SendMessage()
    {
        if (string.IsNullOrWhiteSpace(chatInput.UserInput))
            return;

        var currentInput = chatInput.UserInput;
        messages.Add(new ChatMessage { Text = currentInput, IsUser = true });
        chatInput.UserInput = "";
        isLoading = true;
        StateHasChanged();

        var agentMessage = new ChatMessage { Text = string.Empty, IsUser = false };
        messages.Add(agentMessage);
        try
        {
            await AgentApiClient.StreamAgentRequestStream(currentInput, chunk =>
            {
                agentMessage.Text += chunk;
                InvokeAsync(StateHasChanged);
            },
            error =>
            {
                agentMessage.Text += $"\n[Error]: {error}";
                InvokeAsync(StateHasChanged);
            });
        }
        catch (Exception ex)
        {
            agentMessage.Text += $"\n[Error]: {ex.Message}";
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private async Task HandleFileSelected(InputFileChangeEventArgs e)
    {
        isLoading = true;
        StateHasChanged();

        try
        {
            await AgentApiClient.UploadDocument(e.File);
            messages.Add(new ChatMessage { Text = "File uploaded and processed successfully!", IsUser = false });
            await LoadMonthlySummary(); // Refresh summary after upload
        }
        catch (Exception ex)
        {
            messages.Add(new ChatMessage { Text = $"Error uploading file: {ex.Message}", IsUser = false });
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private class ChatMessage
    {
        public string Text { get; set; } = string.Empty;
        public bool IsUser { get; set; }
    }

    private class ChatInputModel
    {
        public string UserInput { get; set; } = string.Empty;
    }
}
